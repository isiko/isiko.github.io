<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on isiko404's Homepage</title><link>https://isiko.github.io/projects/</link><description>Recent content in Projects on isiko404's Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Mar 2022 00:00:00 +0100</lastBuildDate><atom:link href="https://isiko.github.io/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Abitur</title><link>https://isiko.github.io/projects/abitur/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0100</pubDate><guid>https://isiko.github.io/projects/abitur/</guid><description> As I&amp;rsquo;m German and this is just for me and maby some of my classmates, I&amp;rsquo;ll be writing in German here.
Diese Posts sind wahrscheinlich voller Rechtschreib Fehler, das liegt einfach daran das ich sie größtenteils an einem Nachmittag runter geschrieben habe ;D
Informatik Datenschutz Daten und ihre Strukturen Formale Sprachen Graphen Theorie Rechnernetze SoWi Globalisierung</description><content>&lt;blockquote>
&lt;p>As I&amp;rsquo;m German and this is just for me and maby some of my classmates, I&amp;rsquo;ll be writing in German here.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Diese Posts sind wahrscheinlich voller Rechtschreib Fehler, das liegt einfach daran das ich sie größtenteils an einem Nachmittag runter geschrieben habe ;D&lt;/p>
&lt;/blockquote>
&lt;h1 id="informatik">Informatik&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://isiko.github.io/abitur/computer-science/datenschutz/">Datenschutz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://isiko.github.io/abitur/computer-science/datenundstrukturen">Daten und ihre Strukturen&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://isiko.github.io/abitur/computer-science/automatentheorie">Formale Sprachen&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://isiko.github.io/abitur/computer-science/graphentheorie">Graphen Theorie&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://isiko.github.io/abitur/computer-science/rechnernetze">Rechnernetze&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="sowi">SoWi&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://isiko.github.io/abitur/sowi/globalisierung/">Globalisierung&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Led Cube</title><link>https://isiko.github.io/projects/ledcube/</link><pubDate>Thu, 17 Feb 2022 10:57:42 +0100</pubDate><guid>https://isiko.github.io/projects/ledcube/</guid><description>As everybody, I needed Christmas Presents for my Family last year. And as I consider my self a bit of a maker, I didn&amp;rsquo;t want to just buy something. Also, I had seen some about building a LED Cube like the one on the Cover of this Post and thought that might be an interesting Idea for a present. Only Problem was: I didn&amp;rsquo;t have much time to build them, let alone write some exciting Animations, and so instead of giving I could only promise a gift from me.</description><content>&lt;p>As everybody, I needed Christmas Presents for my Family last year. And as I consider my self a bit of a maker, I didn&amp;rsquo;t want to just buy something. Also, I had seen some about building a LED Cube like the one on the Cover of this Post and thought that might be an interesting Idea for a present. Only Problem was: I didn&amp;rsquo;t have much time to build them, let alone write some exciting Animations, and so instead of giving I could only promise a gift from me.&lt;/p>
&lt;blockquote>
&lt;p>As you are probably reading this: Sorry for that :/&lt;/p>
&lt;/blockquote>
&lt;p>But after New Year I finally found the time to start making, and in the following I will try to write a bit about it.&lt;/p>
&lt;h1 id="how-it-works">How It works&lt;/h1>
&lt;p>Now, if you want to build your own LED Cube, you first have to think about a few things, the biggest question mark being, how to control all those LEDs. You need some kind of Computer to control them, and for these kinds of Projects you normally use Arduinos. These are small computers which don&amp;rsquo;t have a lot of processing power, you wouldn&amp;rsquo;t want to run any modern Operating System on these, but can be programmed to perform small and easy tasks. For example, they are often used in Smart Home applications where your focus mostly lies on measuring Data and not on performing big calculations. The only Problem is: They normally have 10-20 Pins at most, and my Cube uses 64 LEDs.&lt;/p>
&lt;p>This seems pretty bad, but we can actually do some things to make more out of our limited amount of pins. First, we could turn on only one layer at a time. Using only one pin per Vertical line of LEDs, this would only need 16 Pins for the LEDs and 1 Pin for each layer, bringing our total required pin count down to 20.&lt;/p>
&lt;figure class="center" >
&lt;img src="https://content.instructables.com/ORIG/F7K/DAPC/FE7ITU7R/F7KDAPCFE7ITU7R.jpg?auto=webp&amp;amp;frame=1&amp;amp;width=557&amp;amp;height=1024&amp;amp;fit=bounds&amp;amp;md=8529fbd770d33b7399b9d7be1ce6537c" alt="Illustration of how to address the LEDs" />
&lt;figcaption class="center" >Borrowed this Picture from the article I was talking about earlier&lt;/figcaption>
&lt;/figure>
&lt;p>This would be enough to handle for some Arduinos, but as this project really doesn&amp;rsquo;t need that much processing power, I would rather use even fewer Pins. A simple solution to this would be &lt;code>latches&lt;/code>, although there are different configurations of these that have their pros and cons. I could go into depth explaining what latches are and how you can build them, but all you need to know at this point is that they are a very basic form of temporary storage. A simple form of this is the &lt;code>D-Type Latch&lt;/code>, which I used for this project. They have an Input-Input, a clock-input, one output and every time the clock pulses, the Input is copied to the output. When the Clock isn&amp;rsquo;t active anymore, the output won&amp;rsquo;t change. As you normally want more than one bit of storage, you see these often packaged into packages of some factor of 2, e.g. 2-Bits, 4-Bits, 8-Bits and so on. Another interesting use for latches are &lt;code>shift-registers&lt;/code>. You can think of this as a couple of 1-Bit latches chained together, because if you connect all the clocks and link each output to the input of the next latch, everything you put in propagates along the chain. If you think about this, you basically have unlimited outputs while just using 2 Inputs. I hope this was understandable, if not: Just remember the last sentence, it is all you will need to know for this post.&lt;/p>
&lt;blockquote>
&lt;p>If that last paragraph was appealing to you, you might want to check out &lt;a href="https://www.youtube.com/c/BenEater">Ben Eaters YouTube Channel&lt;/a>, for example he has a whole series about building a CPU on some breadboards.&lt;/p>
&lt;/blockquote>
&lt;p>Using these latches, you could think of two rather simple ways to address your pin-limitaion. Either we could use a 16-Bit shift-register or we could use 4 4-Bit latches to program each row before turning on the layer. For my Cubes, I used the second method, but that was just based on the fact that I just learned about shift-registers after I was done with my schematics. If you want to build a cube for yourself, I would suggest using the first method as it lets you have more inputs on your Processor with other stuff [e.g. buttons or even screens], although there is an argument to be made that this is probably a bit slower and might not work for bigger cubes.&lt;/p>
&lt;h1 id="schematics-and-pcb-design">Schematics and PCB-Design&lt;/h1>
&lt;p>When we put all of this together, we get the following Schematics:&lt;/p>
&lt;figure class="center" >
&lt;img src="https://isiko.github.io/img/posts/ledCube/schematic.png" alt="The complete Schematics" />
&lt;figcaption class="center" >The Complete schematics&lt;/figcaption>
&lt;/figure>
&lt;p>They might look a bit strange, for example the big box at the Bottom represents the LEDs, but this has a reason. As I try to learn something new with eatch project, I wanted to try and design a PCB for this one and because of that I was using Eagle for the schematics. Actually, I didn&amp;rsquo;t just do this because of the learning factor, I also didn&amp;rsquo;t want to deal with a jungle of jumper wires.&lt;/p>
&lt;p>Although It might seem complicated at first, designing a PCB isn&amp;rsquo;t actually that hard. In Eagle, each part is defined with a schematics-symbol and a footprint, so when you are done with your schematics you can switch to board-layout mode and eagle already shows you the footprint of each part and what pins should be connected. For simple boards like mine, you just have to organize them all on a board and then hit &amp;lsquo;autoroute&amp;rsquo;. Eagle then generates a layout for the copper traces, and you&amp;rsquo;ll probably just have to make some minor adjustments. The scary part comes when you actually order your board, because when you send your order, you have to wait a few weeks until you can hold the Results in your Hands and if you made a mistake you can&amp;rsquo;t just &amp;lsquo;fix it and rerun&amp;rsquo;. I actually checked every connection 5 times to make sure I didn&amp;rsquo;t have an error.&lt;/p>
&lt;p>I also used only through hole components and wanted to assemble the Boards my self, so after I ordered my PCBs I went over to Reichelt and ordered my components.&lt;/p>
&lt;h1 id="programming">Programming&lt;/h1>
&lt;p>This easily took the most effort. I&amp;rsquo;ve done a bit of Microcontroller Programming in the past, but I&amp;rsquo;m far from calling my self &amp;lsquo;good&amp;rsquo;. The Code for displaying frames on the LEDs was actually quite simple, but figuring out how to split C++ code to multiple classes and files was much harder than I thought. You can see my results &lt;a href="https://github.com/isiko/LED-Cube">here&lt;/a>. Also, as this is actually quite modular, if you also made a cube using the latch Method you could just copy my code, adjust the &lt;code>vars.h&lt;/code> and flash the Project to your Microcontroller using PlatformIO.&lt;/p>
&lt;blockquote>
&lt;p>If you do so, please contact me, I would love to see what you achieved with it&lt;/p>
&lt;/blockquote>
&lt;p>Also, I should clarify again that I am not a good C++ programmer, so there are probably a few improvements to be made. Anyway, I created a Base class for the Animations, which made it possible to just define the animations in an Array, so if you want you can add your own [Just open a pull-request, I&amp;rsquo;ll probably approve it].&lt;/p>
&lt;h2 id="test-animation">Test Animation&lt;/h2>
&lt;p>To have something to test the Cubes with, I started by adding a basic Animation that just flashes each LED, one after another. This makes it easy for me to spot if I made a mistake in the rest of the Code, although it doesn&amp;rsquo;t look that interesting.&lt;/p>
&lt;h2 id="flash">Flash&lt;/h2>
&lt;p>In the Beginning I had a few Hardware Issues [mostly bad solder-spots] and as those normally effect more than one LED at a time, I added an Animation to flash all LEDs at a time. This shows for example if a complete Layer or Row somehow isn&amp;rsquo;t turned on, with the previous test animation would just show nothing for a longer amount of time, which could also be explained with an error in my code.&lt;/p>
&lt;h2 id="layers">Layers&lt;/h2>
&lt;p>For fun and also to test the system, I added an animation which would show layers cutting the Cube, so nothing special.&lt;/p>
&lt;h2 id="moving-lines">Moving Lines&lt;/h2>
&lt;p>The first exciting Animation I made was the &lt;code>DirectLines&lt;/code> Animation. I wanted to have something wander from corner to corner in straight lines. I started by just having one LED, but when I had that down, I added a lifetime to them. Now, when the head moves, I give the Position it moves to a specific Value [for example 5]. This then decreases with each step, and only the Positions which have a value above 0 are turned on. In the end, this looks like a snake of lights is crawling from one corner of the cube to another. When I&amp;rsquo;ve built a bigger Cube, I might also add a version of this Animation that is not constrained to the corners, but with &amp;lsquo;only&amp;rsquo; 64 LEDs that probably won&amp;rsquo;t look that good.&lt;/p>
&lt;h2 id="isi_kos-game-of-life">isi_ko&amp;rsquo;s game of life&lt;/h2>
&lt;p>Conway&amp;rsquo;s game of life is a 0 Player game, invented by English mathematician &lt;a href="https://en.wikipedia.org/wiki/John_Horton_Conway">John Horton Conway&lt;/a>. The Board for his game consists of an infinite amount of Cells, which all can have 2 States: Dead or Alive. Each turn, all the Cells are updated at the same time, according to the following Rules:&lt;/p>
&lt;ol>
&lt;li>Every dead Cell with exactly 3 life neighbors is resurrected.&lt;/li>
&lt;li>Every alive Cell with 2-3 life neighbors survives&lt;/li>
&lt;li>The Rest of the Cells die&lt;/li>
&lt;/ol>
&lt;p>Now you might ask, &amp;lsquo;What fun is a game you can&amp;rsquo;t play?&amp;rsquo; and the answer to that would actually be a bit complicated. As the game of life is something you can only observe, it normally is rather boring. But those simple 3 Rules allow for some interesting stuff, which I will try to explain in the following.&lt;/p>
&lt;p>First, the Game of life is &lt;code>turing-complete&lt;/code>, meaning you can emulate every possible &lt;code>turing machine&lt;/code> with it. As every modern CPU can be theoretically reduced to a &lt;code>turing machine&lt;/code>, this means that you could theoretically calculate everything computer calculable, using only these rules.&lt;/p>
&lt;p>Also, you can find Creatures in the Math of this game. Now for the standard game of life that would be an overstatement, the &amp;lsquo;creatures&amp;rsquo; or &amp;lsquo;gliders&amp;rsquo; as they are called are basically just patterns that repeat themselves while also moving in some direction. But in a variation called &lt;code>[Lenia](https://golden.com/wiki/Lenia)&lt;/code> you can find actual creatures which you could even call living.&lt;/p>
&lt;p>This also probably is something that would be more exciting on a bigger Cube, but I also think that already with this small display I found some interesting formations.&lt;/p>
&lt;p>Porting it to 3D wasn&amp;rsquo;t actually that hard, it basically took me about 45 Minutes as I could actually copy some code from the lines animation. As in 3D space each Cell can have 26 instead of the normal 8 neighbors, I had to use different Values for the rules.&lt;/p>
&lt;blockquote>
&lt;p>Thanks to &lt;a href="https://chrisevans9629.github.io/blog/2020/07/27/game-of-life">Chris Evans&lt;/a> whos Values I endet up &amp;lsquo;borrowing&amp;rsquo;&lt;/p>
&lt;/blockquote>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>So In the end it was quite a lot of fun building this and programming it, so if you are searching for a project maby give it a try. You can find instructions &lt;a href="https://www.instructables.com/LED-Cube-4x4x4/">here&lt;/a>, although I ended up just using their Ideas for Multiplexing, so I don&amp;rsquo;t know how good to follow it is. If I find the time I&amp;rsquo;ll probably try to build a 8x8x8 Cube, so stay tuned as I&amp;rsquo;ll probably also write about that.&lt;/p></content></item><item><title>Flying FPV</title><link>https://isiko.github.io/projects/fpv/</link><pubDate>Thu, 13 Jan 2022 09:27:26 +0100</pubDate><guid>https://isiko.github.io/projects/fpv/</guid><description>First-person view (FPV for short) drones, sometimes called racing drones, are the other kind of drones that most people have never heard of. They differ in almost all respects from the &amp;ldquo;normal&amp;rdquo; camera drones known from manufacturers like DJI or Parrot. While the Parrot drone takes care of most of the flight control, here the pilot has to take care of the stabilization of the drone.
What seems like a big disadvantage at first glance is actually quite an advantage for FPV drones: With the extended level of control from the pilot, the pilot also has more options of what he can do with the aircraft.</description><content>&lt;p>First-person view (FPV for short) drones, sometimes called racing drones, are the other kind of drones that most people have never heard of. They differ in almost all respects from the &amp;ldquo;normal&amp;rdquo; camera drones known from manufacturers like DJI or Parrot. While the Parrot drone takes care of most of the flight control, here the pilot has to take care of the stabilization of the drone.&lt;/p>
&lt;p>What seems like a big disadvantage at first glance is actually quite an advantage for FPV drones: With the extended level of control from the pilot, the pilot also has more options of what he can do with the aircraft. For example, a flip on a conventional drone can only be done using a button pre-programmed by the manufacturer, while doing tricks over and around obstacles is one of the biggest parts of FPV drones, referred to as freestyle.&lt;/p>
&lt;p>Of course, this also means that not every flight ends in a clean landing, for example, there is no controlled automatic landing sequence as with DJI, instead of which the motors are simply switched off, but this has also developed an advantage; because it is clear that the drones will probably be crashed, they are also built with this in mind. In most cases, every part is individually replaceable, from the propellers to the flight computer. Even the software in most cases open source, which means that it can write with, or even simply create its own version with its own features, if he is missing something in the official version.&lt;/p>
&lt;h1 id="my-journey-to-the-world-of-fpv">My Journey to the World of FPV&lt;/h1>
&lt;p>It all started last year with the introduction of the DJI FPV. With this drone, DJI wanted to enter the FPV drone market, which for the first time gave people the opportunity to have a smooth transition from normal flying to full acrobatic mode without having to practice for hours in a simulator, which is usually the first thing new FPV pilots have to do.&lt;/p>
&lt;p>I think the first time I saw this was in this video from MKBHD:
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/syiQmaGZFXM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/p>
&lt;p>I loved the drone, but then I looked at the price tag of about 1600€ and sighed.&lt;/p>
&lt;p>A few weeks later. My friend who had sent me the video was asked to produce an interactive video for our school to virtually show the new students around, since they couldn&amp;rsquo;t visit themselves because of Covid. The idea was to have a sparrow named Tom to show the students around. So we needed shots from the bird&amp;rsquo;s point of view flying over the school. That wasn&amp;rsquo;t a problem, we had done drone footage of the school in the past, but now we didn&amp;rsquo;t want just any drone footage, we wanted a bird flying around the school. The thing about normal drones is that they can do exactly one thing: take stable shots. You can definitely add some wobble in post-processing, but it won&amp;rsquo;t look as good. So to simulate a bird, we had to get an FPV drone, and somehow my friend convinced the school to buy us a DJI FPV system.&lt;/p>
&lt;figure class="center" >
&lt;img src="https://isiko.github.io/img/posts/fpv/testFlight.jpg" alt="The Drone, flying over a grass field" />
&lt;figcaption class="center" >Of course we had to take it for a test flight&lt;/figcaption>
&lt;/figure>
&lt;p>That was when I started looking for a drone for myself. I knew I couldn&amp;rsquo;t afford a DJI FPV, but there had to be an option for me, and there was! I ended up getting what is called a Tiny Whoop. These drones are no bigger than the palm of your hand, but this allows them to be flown indoors and near people, which is great because then you can practice around the house without potentially losing the drone in a field. They are also incredibly cheap, I paid around 160€ for a complete kit with &lt;a href="https://betafpv.com/products/vr02-fpv-goggles">goggles&lt;/a>, a &lt;a href="https://betafpv.com/products/literadio-2-se-radio-transmitter">remote control&lt;/a> and the &lt;a href="https://betafpv.com/products/beta65s-bnf-micro-whoop-quadcopter">drone&lt;/a>, while the bigger drones usually start at around 300€.&lt;/p>
&lt;p>So I started flying indoors and annoying my family while I slowly dismantled the drone. Eventually, though, I wanted to do more. The problem was that you can&amp;rsquo;t really do any tricks with these tiny drones because they don&amp;rsquo;t have the power to catch themselves after a short fall. They also lose momentum pretty quickly because of their light weight and if you wan&amp;rsquo;t to do some long range stuff with them, no chanche because there isn&amp;rsquo;t enough place to but a decent reciever on these tiny tiny drones. So I went ahead and got a full 5&amp;quot; Quad. There were a few problems with the receiver and I had to change my radio, but now I can even fly a bit far as long as there is a clear view.&lt;/p>
&lt;p>And this is exactly where I am now! Right now I&amp;rsquo;m flying more in the simulator because it&amp;rsquo;s pretty cold out right now, but come summer I&amp;rsquo;ll be back in the field, at least I hope so. I&amp;rsquo;ll try to post updates here when something interesting happens.&lt;/p></content></item><item><title>Advent of Code</title><link>https://isiko.github.io/projects/aoc2021/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0100</pubDate><guid>https://isiko.github.io/projects/aoc2021/</guid><description>This Year, I participated at Advent of Code for the First Time. If you don&amp;rsquo;t know Advent of Code, it&amp;rsquo;s an advent calendar where you can find small programming tasks from the 1st to the 25th of December every year. These are often related to different areas of computer science, which is why the website is not only used as a calendar but also for learning programming or even as a preparation for coding interviews.</description><content>&lt;p>This Year, I participated at Advent of Code for the First Time.
If you don&amp;rsquo;t know Advent of Code, it&amp;rsquo;s an advent calendar where you can find small programming tasks from the 1st to the 25th of December every year. These are often related to different areas of computer science, which is why the website is not only used as a calendar but also for learning programming or even as a preparation for coding interviews.&lt;/p>
&lt;p>And that was exactly my idea; I had been planning to learn C for a while, but never found a suitable opportunity. So the goal was to solve each of the 25 tasks with raw C, using only the standard libraries. If you know some C, you can guess what a torture this was going to be.&lt;/p>
&lt;h1 id="the-tasks">The tasks&lt;/h1>
&lt;p>Day 1 I had finished in about 10 minutes, here it was only about finding out in a list of numbers how often the value increases, so I wrote it down relatively fast. The much bigger hurdle was setting up the compiler, because I unfortunately still use a Windows computer, this turned out to be more complicated than I thought. But in the end I got CMake running and I was done for the day.&lt;/p>
&lt;p>Days 2-5 were also relatively easy to solve. As time went on, I became more familiar with the language and learned that I could write reusable code, which made some copy/paste work easier. The bigger challenge came on day 6.&lt;/p>
&lt;p>Day 6 looked simple at first. You had to model a lanternfish population. The rules were not very complicated; each fish produced a new fish every 7 days, and the first cycle was always 2 days longer, so 9 days instead of 7. The task was to find out how many fish this would result in after 80 or 256 days.&lt;/p>
&lt;p>My first approach was to simply store all fish in a long string and then after each day turn &lt;code>8&lt;/code> into &lt;code>7&lt;/code>, &lt;code>7&lt;/code> into &lt;code>6&lt;/code> and so on. What I didn&amp;rsquo;t think about: In the end there were about 400.000 fishes, which is a bit much to iterate over, especially if you don&amp;rsquo;t know the language and don&amp;rsquo;t write very efficient code. The 2nd, and much better approach was to store the fish in an integer array, with the index indicating the current status in the reproduction cycle.&lt;/p>
&lt;p>With this solution, I was able to calculate the fish up to day 80, it only became problematic when the numbers became too large on the 2nd part. I probably could have done this with C too, but I have no idea how to convince the compiler to use the correct data type for the integer array, so I finally did it with Python.&lt;/p>
&lt;p>I had the same problem with Day 10.2 and 14.2, so I don&amp;rsquo;t have a solution here. Unfortunately, this also led to the fact that I somewhat lost the desire. I still did the first part of day 17, but after that I started to work on other things.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>All in all, I can&amp;rsquo;t find fault with anything, except that maybe it wasn&amp;rsquo;t the smartest idea to write the Advent of Code as my first project in a language like C, which is almost completely unknown to me. Next year I will definitely be back, but then probably with another language, maybe NodeJS or Python. If you want to have a look at what else I&amp;rsquo;ve done, you can find the repo &lt;a href="https://github.com/isiko/AdventOfCode2021">here&lt;/a>&lt;/p></content></item></channel></rss>